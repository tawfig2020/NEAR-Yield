name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  DEPLOYMENT_URL: ${{ secrets.DEPLOYMENT_URL }}
  NEAR_ACCOUNT_ID: ${{ secrets.NEAR_ACCOUNT_ID }}
  NEAR_PRIVATE_KEY: ${{ secrets.NEAR_PRIVATE_KEY }}
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
  BACKUP_BUCKET: ${{ secrets.BACKUP_BUCKET }}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security scan
        run: |
          npm install -g snyk
          snyk test
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
          
      - name: Run tests
        run: npm test
        
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DEPLOYMENT_URL: ${{ env.DEPLOYMENT_URL }}
          
  deploy-contract:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup NEAR CLI
        run: npm install -g near-cli
        
      - name: Deploy contract
        run: |
          near deploy --accountId $NEAR_ACCOUNT_ID \
                     --wasmFile ./contract/target/wasm32-unknown-unknown/release/contract.wasm
        env:
          NEAR_ACCOUNT_ID: ${{ env.NEAR_ACCOUNT_ID }}
          NEAR_PRIVATE_KEY: ${{ env.NEAR_PRIVATE_KEY }}
          
  deploy-frontend:
    needs: deploy-contract
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Deploy to S3
        run: |
          aws s3 sync build/ s3://$AWS_S3_BUCKET
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
        env:
          AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}
          
      - name: Backup deployment
        run: |
          aws s3 sync build/ s3://$BACKUP_BUCKET/$(date +%Y-%m-%d)/
        env:
          BACKUP_BUCKET: ${{ env.BACKUP_BUCKET }}
          
  security-scan:
    needs: deploy-frontend
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: us-east-1
          
      - name: Run security scan
        run: |
          npm install -g security-scanner
          security-scanner scan
          
  contract-verification:
    needs: deploy-contract
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Verify contract
        run: |
          near view $NEAR_ACCOUNT_ID get_contract_version
        env:
          NEAR_ACCOUNT_ID: ${{ env.NEAR_ACCOUNT_ID }}
          NEAR_PRIVATE_KEY: ${{ env.NEAR_PRIVATE_KEY }}
          
  notify:
    needs: [deploy-frontend, security-scan, contract-verification]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
